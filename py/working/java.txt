Class_declaration ::=
  Class | [ `Modifier ] class `Class_name "{" { `Field_declaration } "}"

Class_name ::=
  ClassName | $[A-Z][A-Za-z0-9]*$

Expression ::=
  Plus | `Expression "+" `Expression
  Minus | `Expression - `Expression
  Multiply | `Expression "*" `Expression
  Divide | `Expression / `Expression

  GreaterThan | `Expression > `Expression
  GreaterThanEq | `Expression >= `Expression
  LessThan | `Expression < `Expression
  LessThanEq | `Expression <= `Expression
  Eq | `Expression == `Expression
  NotEq | `Expression != `Expression

  And | `Expression && `Expression
  Or | `Expression "|""|" `Expression
  Xor | `Expression ^ `Expression 

  Null | null
  True | true
  False | false

  None | "(" `Expression ")"
  Cast | "(" `Type ")" `Expression
  Negate | - `Expression
  Not | ! `Expression

  Call | `Method_name "(" [ `Parameter_list ] ")"
  Variable | $[A-Za-z][A-Za-z0-9]*$
  Integer | $(0|[1-9][0-9]*)$
  Char | $(\'[^\s]\')$
  String | $(\"[^\s]*\")$

Field_declaration ::=
  Global | `Variable_declaration ;
  Method | [ `Modifier ] `Return_type `Method_name "(" [ `Parameter_list ] ")" "{" { `Statement } "}"
  Constructor | [ `Modifer ] `Class_name "(" [ `Parameter_list ] ")" "{" { `Statement } "}"

Import_statement ::=
  Import | import `Class_name ;

Modifier ::=
  Modifier | `Modifier_type+

Modifier_type ::=
  Public | public 
  Private | private
  Static | static

Parameter_list ::=
  ParameterList | `Variable_declaration { , `Variable_declaration }
  ParameterList | `Expression { , `Expression }

Return_type ::=
  ReturnType | `Type

Statement ::=
  Equals | `Variable_name = `Expression ;
  None | `Expression ;
  If | if "(" `Expression ")" "{" { `Statement } "}" [ else "{" { `Statement } "}" ]
  Do | do "{" { `Statement } "}" while "(" `Expression ")" ;
  While | while "(" `Expression ")" "{" { `Statement } "}"
  For | for "(" `Variable_declaration ; [ `Expression ] ; [ `Expression ] ; ")" "{" { `Statement } "}"
  For | for "(" [ `Expression ] ; [ `Expression ] ; [ `Expression ] ; ")" "{" { `Statement } "}"
  Return | return [ `Expression ] ;
  Break | break ;
  Continue | continue ;

Statement_block ::=
  StmtBlock | "{" { `Statement } "}"

Type ::=
  Void | void
  Boolean | boolean
  Char | char
  Integer | int
  Double | double
  Object | $[A-Z][A-Za-z0-9]*$

Variable_declaration ::=
  InitVariable | [ `Modifier ] `Type `Variable_name [ = `Expression ]
  InitVariable | [ `Modifier ] new `Type "(" [ `Expression { , `Expression } ] ")"

Variable_name ::=
  Variable | $[A-Za-z][A-Za-z0-9]*$

Method_name ::=
  MethodName | $[a-z][A-Za-z0-9]*$
