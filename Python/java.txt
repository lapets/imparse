Class_declaration ::=
  Class | [ `Modifier ] class `Class_name "{" { `Field_declaration } "}"
  NewObject | new `Class_name "(" [ `Expression { , `Expression } ] ")"

Class_name ::=
  ClassName | $[A-Z][A-Za-z0-9]*$

Expression ::=
  Plus | `Expression "+" `Expression
  Minus | `Expression - `Expression
  Multiply | `Expression "*" `Expression
  Divide | `Expression / `Expression

  GreaterThan | `Expression > `Expression
  GreaterThanEqual | `Expression >= `Expression
  LessThan | `Expression < `Expression
  LessThanEqual | `Expression <= `Expression
  Equal | `Expression == `Expression
  NotEqual | `Expression != `Expression

  And | `Expression && `Expression
  Or | `Expression "|""|" `Expression
  Xor | `Expression ^ `Expression 

  Null | null
  True | true
  False | false

  None | "(" `Expression ")"
  Cast | "(" `Type ")" `Expression
  Negate | - `Expression
  Not | ! `Expression

  Variable | $[A-Za-z][A-Za-z0-9]*$
  Integer | $(0|[1-9][0-9]*)$
  Char | $(\'[^\s]\')$
  String | $(\'[^\s]*\')$

Field_declaration ::=
  GlobalVariable | `Variable_declaration ;
  Method | [ `Modifier ] `Type $[a-z][A-Za-z0-9]*$ "(" [ `Parameter_list ] ")" `Statement_block
  Method | [ `Modifier ] `Type $[a-z][A-Za-z0-9]*$ "(" [ `Parameter_list ] ")" ;
  Constructor | [ `Modifer ] `Class_name "(" [ `Parameter_list ] ")" `Statement_block

Import_statement ::=
  Import | import `Class_name ;

Modifier ::=
  Modifier | { `Modifier_type }

Modifier_type ::=
  Public | public 
  Private | private
  Static | static

Parameter_list ::=
  ParameterList | `Type $[A-Za-z][A-Za-z0-9]*$ { , `Type $[A-Za-z][A-Za-z0-9]*$ }

Statement ::=
  None | `Variable_declaration ;
  Stmt | `Expression ;
  StmtBlock | `Statement_block
  If | if "(" `Expression ")" `Statement [ else `Statement ]
  Do | do `Statement while "(" `Expression ")" ;
  While | while "(" `Expression ")" `Statement
  For | for "(" `Variable_declaration ; [ `Expression ] ; [ `Expression ] ; ")" `Statement
  For | for "(" [ `Expression ] ; [ `Expression ] ; [ `Expression ] ; ")" `Statement
  Return | return [ `Expression ] ;
  Break | break ;
  Continue | continue ;
  EndStmt | ;

Statement_block ::=
  StmtBlock | "{" { `Statement } "}"

Type ::=
  Void | void
  Boolean | boolean
  Char | char
  Int | int
  Double | double
  ClassType | $[A-Z][A-Za-z0-9]*$

Variable_declaration ::=
  Object | [ `Modifier ] `Type $[A-Z][A-Za-z0-9]*$ [ = `Expression ]
  Variable | [ `Modifier ] `Type $[a-z][A-Za-z0-9]*$ [ = `Expression ]
